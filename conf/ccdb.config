
//Module binaries to be enabled if using modules with binaries
nextflow.enable.moduleBinaries = true


//defining static resource file paths which are consistent across all runs
params {
    vep_cache      = "/lustre06/project/6008022/All_user_common_folder/SOFTWARE/VEP/cache"
    genome_regions = "/lustre06/project/6008022/clarkb/CNV-DB-Builder/resources/Genome_Regions/Genome_Regions_data.tsv"
    //HG38 specific gnomad file
    gnomad_AF      = "/lustre06/project/6008022/All_user_common_folder/SOFTWARE/VEP/cache/ressources_gnomAD/gnomad.v4.1.sv.sites.vcf.bgz"
    gnomad_constraints = "/lustre06/project/6008022/All_user_common_folder/SOFTWARE/VEP/cache/ressources_LOEUF/gnomad.v4.1.constraint_metrics.tsv"
}

// vep_annotate configurations 
process {
    executor = 'slurm'
     withLabel: vep {
        cpus = 16
        module = ['apptainer/1.3.5', 'htslib/1.19']
        container = '/lustre06/project/6008022/All_user_common_folder/SOFTWARE/VEP/vep.sif'
        clusterOptions = '--mem-per-cpu 3500MB --account=rrg-jacquese'
        time = '1h'
        }

     withLabel: quick {
        executor = 'local'
     }
     withLabel: long {
        clusterOptions = '--mem-per-cpu 3500MB \
        --account=rrg-jacquese \
        --ntasks 1 \
        --cpus-per-task 8'
     }
     withLabel : polars {
        beforeScript =      '''
                            module load python/3.13.2
                            virtualenv --no-download $SLURM_TMPDIR/env
                            source $SLURM_TMPDIR/env/bin/activate
                            pip install --no-index --upgrade pip
                            pip install --no-index polars
                           '''
     }

    withName: buildCnvDB {
        module = "bedtools/2.31.0"
        //cpus = 4
        //clusterOptions = '--mem-per-cpu 3500MB --account=rrg-jacquese'
    }
}





//Default OOM Error strategy
maxRetries = 4
errorStrategy = { task.exitStatus in [125,139] ? 'retry' : 'finish' }
memory = { check_max( 4.GB * task.attempt, 'memory' ) }


//Narval Default slurm schedualer params. Queue size can be adjusted up to 1000 according to the wiki 
executor {
  pollInterval = '60 sec'
  submitRateLimit = '60/1min'
  queueSize = 100 
  perCpuMemAllocation = true
}

apptainer {
    enabled = true
    autoMounts = true
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
