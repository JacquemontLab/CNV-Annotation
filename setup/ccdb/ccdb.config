
//Module binaries to be enabled if using modules with binaries
nextflow.enable.moduleBinaries = true


//defining static resource file paths which are consistent across all runs
params {
    vep_cache  = "/lustre09/project/6008022/LAB_WORKSPACE/SOFTWARE/VEP/cache"
}

// vep_annotate configurations 
process {
    executor = 'local'

     withLabel: vep {
        executor = 'local'
        module = ['apptainer/1.3.5', 'htslib/1.19']
        container = '/lustre09/project/6008022/LAB_WORKSPACE/SOFTWARE/VEP/vep.sif'
        cpus = Runtime.runtime.availableProcessors()
        // clusterOptions = '--mem-per-cpu 3500MB --account=rrg-jacquese'
        }

     withLabel: quick {
        executor = 'local'
     }

     withLabel: SmallFile {
        executor = 'local'
     }

     withLabel: LargeFile {
        executor = 'slurm'
        cpus = 64
        time = '5h'
        clusterOptions = '--mem-per-cpu 30000MB --account=rrg-jacquese'
     }
     
    withName: produceSummaryPDF {
	    cpus = Runtime.runtime.availableProcessors()
	    //getting the available mem on the head node
	    //memory = {bytes -> "${(bytes / (1024L * 1024 * 1024)) as int} GB"} (Runtime.runtime.freeMemory()) 
        module = 'apptainer/1.3.5'
        container = '/lustre09/project/6008022/LAB_WORKSPACE/SOFTWARE/Dockers/duckdb_python_v1.1.sif'
    }

    withName: computeOverlapRegion {
        module = 'bedtools/2.31.0'
    }
}





//Default OOM Error strategy
maxRetries = 4
errorStrategy = { task.exitStatus in [125,139] ? 'retry' : 'finish' }
memory = { check_max( 4.GB * task.attempt, 'memory' ) }


//Narval Default slurm schedualer params. Queue size can be adjusted up to 1000 according to the wiki 
executor {
  pollInterval = '60 sec'
  submitRateLimit = '60/1min'
  queueSize = 100 
  perCpuMemAllocation = true
}

apptainer {
    enabled = true
    autoMounts = true
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
